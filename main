import React, { useState, useEffect } from 'react';
import { ChevronLeft, ChevronRight, Clock, Play, Pause, RotateCcw } from 'lucide-react';

const PomodoroTimer = () => {
  const [timeLeft, setTimeLeft] = useState(25 * 60); // 25 minutes in seconds
  const [isActive, setIsActive] = useState(false);
  const [mode, setMode] = useState('work'); // 'work', 'shortBreak', 'longBreak'

  const modes = {
    work: { duration: 25 * 60, label: 'Focus Time', color: 'text-red-400' },
    shortBreak: { duration: 5 * 60, label: 'Short Break', color: 'text-green-400' },
    longBreak: { duration: 15 * 60, label: 'Long Break', color: 'text-blue-400' }
  };

  useEffect(() => {
    let interval = null;
    if (isActive && timeLeft > 0) {
      interval = setInterval(() => {
        setTimeLeft(timeLeft => timeLeft - 1);
      }, 1000);
    } else if (timeLeft === 0) {
      setIsActive(false);
    }
    return () => clearInterval(interval);
  }, [isActive, timeLeft]);

  const toggleTimer = () => {
    setIsActive(!isActive);
  };

  const resetTimer = () => {
    setIsActive(false);
    setTimeLeft(modes[mode].duration);
  };

  const switchMode = (newMode) => {
    setMode(newMode);
    setTimeLeft(modes[newMode].duration);
    setIsActive(false);
  };

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  const progress = ((modes[mode].duration - timeLeft) / modes[mode].duration) * 100;

  return (
    <div className="flex flex-col items-center justify-center h-full">
      <div className="flex items-center gap-4 mb-4">
        <Clock className="w-8 h-8 text-orange-400" />
        <h3 className="text-2xl font-bold text-white">Pomodoro</h3>
      </div>

      {/* Mode Selector */}
      <div className="flex gap-2 mb-6">
        <button
          onClick={() => switchMode('work')}
          className={`px-3 py-1 rounded-full text-sm transition-all ${
            mode === 'work' ? 'bg-red-500 text-white' : 'bg-white/20 text-white/80 hover:bg-white/30'
          }`}
        >
          Focus
        </button>
        <button
          onClick={() => switchMode('shortBreak')}
          className={`px-3 py-1 rounded-full text-sm transition-all ${
            mode === 'shortBreak' ? 'bg-green-500 text-white' : 'bg-white/20 text-white/80 hover:bg-white/30'
          }`}
        >
          Short
        </button>
        <button
          onClick={() => switchMode('longBreak')}
          className={`px-3 py-1 rounded-full text-sm transition-all ${
            mode === 'longBreak' ? 'bg-blue-500 text-white' : 'bg-white/20 text-white/80 hover:bg-white/30'
          }`}
        >
          Long
        </button>
      </div>

      {/* Timer Circle - Larger */}
      <div className="relative w-48 h-48 mb-6">
        <svg className="w-48 h-48 transform -rotate-90" viewBox="0 0 120 120">
          <circle
            cx="60"
            cy="60"
            r="50"
            stroke="rgba(255,255,255,0.2)"
            strokeWidth="8"
            fill="none"
          />
          <circle
            cx="60"
            cy="60"
            r="50"
            stroke="currentColor"
            strokeWidth="8"
            fill="none"
            strokeDasharray={`${2 * Math.PI * 50}`}
            strokeDashoffset={`${2 * Math.PI * 50 * (1 - progress / 100)}`}
            className={modes[mode].color}
            strokeLinecap="round"
            style={{ transition: 'stroke-dashoffset 1s ease' }}
          />
        </svg>
        <div className="absolute inset-0 flex items-center justify-center">
          <span className="text-4xl font-mono font-bold text-white">
            {formatTime(timeLeft)}
          </span>
        </div>
      </div>

      {/* Current Mode Label */}
      <div className={`text-xl font-semibold mb-6 ${modes[mode].color}`}>
        {modes[mode].label}
      </div>

      {/* Control Buttons */}
      <div className="flex gap-4">
        <button
          onClick={toggleTimer}
          className="bg-white/20 hover:bg-white/30 text-white p-4 rounded-full transition-all duration-200 hover:scale-105"
        >
          {isActive ? <Pause className="w-8 h-8" /> : <Play className="w-8 h-8" />}
        </button>
        <button
          onClick={resetTimer}
          className="bg-white/20 hover:bg-white/30 text-white p-4 rounded-full transition-all duration-200 hover:scale-105"
        >
          <RotateCcw className="w-8 h-8" />
        </button>
      </div>
    </div>
  );
};

const TabletKiosk = () => {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [time, setTime] = useState(new Date());

  // Update time every second
  useEffect(() => {
    const timer = setInterval(() => {
      setTime(new Date());
    }, 1000);
    return () => clearInterval(timer);
  }, []);

  const monthNames = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
  ];

  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

  const getDaysInMonth = (date) => {
    const year = date.getFullYear();
    const month = date.getMonth();
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const daysInMonth = lastDay.getDate();
    const startingDayOfWeek = firstDay.getDay();

    const days = [];
    
    // Add empty cells for days before the first day of the month
    for (let i = 0; i < startingDayOfWeek; i++) {
      days.push(null);
    }
    
    // Add all days of the month
    for (let day = 1; day <= daysInMonth; day++) {
      days.push(day);
    }
    
    return days;
  };

  const navigateMonth = (direction) => {
    setCurrentDate(prev => {
      const newDate = new Date(prev);
      newDate.setMonth(prev.getMonth() + direction);
      return newDate;
    });
  };

  const isToday = (day) => {
    if (!day) return false;
    const today = new Date();
    return (
      day === today.getDate() &&
      currentDate.getMonth() === today.getMonth() &&
      currentDate.getFullYear() === today.getFullYear()
    );
  };

  const formatTime = (date) => {
    return date.toLocaleTimeString('en-US', {
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      hour12: false
    });
  };

  const formatDate = (date) => {
    return date.toLocaleDateString('en-US', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  const days = getDaysInMonth(currentDate);

  return (
    <div className="h-screen w-full bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 flex overflow-hidden">
      {/* Calendar Section - 2/3 of screen */}
      <div className="w-2/3 p-6 flex flex-col">
        <div className="bg-white/10 backdrop-blur-md rounded-3xl p-8 h-full shadow-2xl border border-white/20">
          {/* Calendar Header */}
          <div className="flex items-center justify-between mb-8">
            <button
              onClick={() => navigateMonth(-1)}
              className="p-3 rounded-full bg-white/20 hover:bg-white/30 transition-all duration-200 backdrop-blur-sm"
            >
              <ChevronLeft className="w-6 h-6 text-white" />
            </button>
            
            <h2 className="text-4xl font-bold text-white text-center">
              {monthNames[currentDate.getMonth()]} {currentDate.getFullYear()}
            </h2>
            
            <button
              onClick={() => navigateMonth(1)}
              className="p-3 rounded-full bg-white/20 hover:bg-white/30 transition-all duration-200 backdrop-blur-sm"
            >
              <ChevronRight className="w-6 h-6 text-white" />
            </button>
          </div>

          {/* Days of Week Header */}
          <div className="grid grid-cols-7 gap-2 mb-4">
            {daysOfWeek.map(day => (
              <div key={day} className="text-center py-3">
                <span className="text-white/80 font-semibold text-lg">{day}</span>
              </div>
            ))}
          </div>

          {/* Calendar Grid */}
          <div className="grid grid-cols-7 gap-2 flex-1">
            {days.map((day, index) => (
              <div
                key={index}
                className={`
                  aspect-square flex items-center justify-center rounded-2xl text-xl font-medium
                  transition-all duration-200 hover:scale-105
                  ${day ? 'cursor-pointer' : ''}
                  ${isToday(day) 
                    ? 'bg-gradient-to-br from-blue-500 to-purple-600 text-white shadow-lg scale-105' 
                    : day 
                      ? 'bg-white/10 text-white hover:bg-white/20 backdrop-blur-sm' 
                      : ''
                  }
                `}
              >
                {day && (
                  <span className={isToday(day) ? 'font-bold' : ''}>{day}</span>
                )}
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Right Side Panel - 1/3 of screen */}
      <div className="w-1/3 p-6 flex flex-col gap-6">
        {/* Time Display - 1/3 of right panel */}
        <div className="bg-white/10 backdrop-blur-md rounded-3xl p-6 shadow-2xl border border-white/20" style={{flex: '1'}}>
          <div className="flex items-center gap-4 mb-2">
            <Clock className="w-6 h-6 text-blue-400" />
            <h3 className="text-xl font-bold text-white">Time</h3>
          </div>
          
          <div className="text-center flex flex-col justify-center h-full">
            <div className="text-6xl font-mono font-bold text-white mb-1">
              {time.toLocaleTimeString('en-US', {
                hour: '2-digit',
                minute: '2-digit',
                hour12: false
              })}
            </div>
            <div className="text-sm text-white/80">
              {formatDate(time)}
            </div>
          </div>
        </div>

        {/* Pomodoro Timer - 2/3 of right panel */}
        <div className="bg-white/10 backdrop-blur-md rounded-3xl p-8 shadow-2xl border border-white/20" style={{flex: '2'}}>
          <PomodoroTimer />
        </div>
      </div>
    </div>
  );
};

export default TabletKiosk;
